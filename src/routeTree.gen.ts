/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as RegisterImport } from './routes/register';
import { Route as DashboardImport } from './routes/dashboard';
import { Route as SetupMfaImport } from './routes/Setup-mfa';
import { Route as LoginImport } from './routes/Login';
import { Route as InputTotpImport } from './routes/Input-totp';
import { Route as IndexImport } from './routes/index';

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any);

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any);

const SetupMfaRoute = SetupMfaImport.update({
  id: '/Setup-mfa',
  path: '/Setup-mfa',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: '/Login',
  path: '/Login',
  getParentRoute: () => rootRoute,
} as any);

const InputTotpRoute = InputTotpImport.update({
  id: '/Input-totp',
  path: '/Input-totp',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/Input-totp': {
      id: '/Input-totp';
      path: '/Input-totp';
      fullPath: '/Input-totp';
      preLoaderRoute: typeof InputTotpImport;
      parentRoute: typeof rootRoute;
    };
    '/Login': {
      id: '/Login';
      path: '/Login';
      fullPath: '/Login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/Setup-mfa': {
      id: '/Setup-mfa';
      path: '/Setup-mfa';
      fullPath: '/Setup-mfa';
      preLoaderRoute: typeof SetupMfaImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard': {
      id: '/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof rootRoute;
    };
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/Input-totp': typeof InputTotpRoute;
  '/Login': typeof LoginRoute;
  '/Setup-mfa': typeof SetupMfaRoute;
  '/dashboard': typeof DashboardRoute;
  '/register': typeof RegisterRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/Input-totp': typeof InputTotpRoute;
  '/Login': typeof LoginRoute;
  '/Setup-mfa': typeof SetupMfaRoute;
  '/dashboard': typeof DashboardRoute;
  '/register': typeof RegisterRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/Input-totp': typeof InputTotpRoute;
  '/Login': typeof LoginRoute;
  '/Setup-mfa': typeof SetupMfaRoute;
  '/dashboard': typeof DashboardRoute;
  '/register': typeof RegisterRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/Input-totp'
    | '/Login'
    | '/Setup-mfa'
    | '/dashboard'
    | '/register';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/Input-totp'
    | '/Login'
    | '/Setup-mfa'
    | '/dashboard'
    | '/register';
  id:
    | '__root__'
    | '/'
    | '/Input-totp'
    | '/Login'
    | '/Setup-mfa'
    | '/dashboard'
    | '/register';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  InputTotpRoute: typeof InputTotpRoute;
  LoginRoute: typeof LoginRoute;
  SetupMfaRoute: typeof SetupMfaRoute;
  DashboardRoute: typeof DashboardRoute;
  RegisterRoute: typeof RegisterRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InputTotpRoute: InputTotpRoute,
  LoginRoute: LoginRoute,
  SetupMfaRoute: SetupMfaRoute,
  DashboardRoute: DashboardRoute,
  RegisterRoute: RegisterRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Input-totp",
        "/Login",
        "/Setup-mfa",
        "/dashboard",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Input-totp": {
      "filePath": "Input-totp.tsx"
    },
    "/Login": {
      "filePath": "Login.tsx"
    },
    "/Setup-mfa": {
      "filePath": "Setup-mfa.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
