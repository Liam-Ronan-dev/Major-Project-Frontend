/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as SetupMfaImport } from './routes/Setup-mfa';
import { Route as RegisterImport } from './routes/Register';
import { Route as LoginImport } from './routes/Login';
import { Route as IndexImport } from './routes/index';

// Create/Update Routes

const SetupMfaRoute = SetupMfaImport.update({
  id: '/Setup-mfa',
  path: '/Setup-mfa',
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoute = RegisterImport.update({
  id: '/Register',
  path: '/Register',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: '/Login',
  path: '/Login',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/Login': {
      id: '/Login';
      path: '/Login';
      fullPath: '/Login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/Register': {
      id: '/Register';
      path: '/Register';
      fullPath: '/Register';
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    '/Setup-mfa': {
      id: '/Setup-mfa';
      path: '/Setup-mfa';
      fullPath: '/Setup-mfa';
      preLoaderRoute: typeof SetupMfaImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/Login': typeof LoginRoute;
  '/Register': typeof RegisterRoute;
  '/Setup-mfa': typeof SetupMfaRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/Login': typeof LoginRoute;
  '/Register': typeof RegisterRoute;
  '/Setup-mfa': typeof SetupMfaRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/Login': typeof LoginRoute;
  '/Register': typeof RegisterRoute;
  '/Setup-mfa': typeof SetupMfaRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/Login' | '/Register' | '/Setup-mfa';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/Login' | '/Register' | '/Setup-mfa';
  id: '__root__' | '/' | '/Login' | '/Register' | '/Setup-mfa';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  SetupMfaRoute: typeof SetupMfaRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SetupMfaRoute: SetupMfaRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Login",
        "/Register",
        "/Setup-mfa"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Login": {
      "filePath": "Login.tsx"
    },
    "/Register": {
      "filePath": "Register.tsx"
    },
    "/Setup-mfa": {
      "filePath": "Setup-mfa.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
